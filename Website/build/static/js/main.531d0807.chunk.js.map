{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","database","ref","mammoth","require","useStyles","makeStyles","theme","root","flexGrow","menuButton","marginRight","spacing","title","ButtonAppBar","classes","className","AppBar","position","Toolbar","Typography","variant","MyDropzone","upload","setUpload","text","messages","onDrop","useCallback","acceptedFiles","forEach","file","reader","FileReader","onabort","console","log","onerror","onload","file_extention","name","split","pop","arrayBuffer","result","String","fromCharCode","apply","Uint8Array","extractRawText","then","value","done","readAsArrayBuffer","useDropzone","getRootProps","getInputProps","Fragment","align","IconButton","App","useState","Card","CardContent","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"ibAmBAA,IAASC,cAVc,CACrBC,OAAQ,0CACRC,WAAY,oCACZC,YAAa,2CACbC,UAAW,oBACXC,cAAe,gCACfC,kBAAmB,eACnBC,MAAO,8CAKER,IAASS,WAAWC,MAA/B,IAEIC,EAAUC,EAAQ,KAEhBC,EAAYC,aAAW,SAAAC,GAAK,MAAK,CACrCC,KAAM,CACJC,SAAU,GAEZC,WAAY,CACVC,YAAaJ,EAAMK,QAAQ,IAE7BC,MAAO,CACLJ,SAAU,OAId,SAASK,IACP,IAAMC,EAAUV,IAEhB,OACE,yBAAKW,UAAWD,EAAQP,MACtB,kBAACS,EAAA,EAAD,CAAQC,SAAS,UACf,kBAACC,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CAAYC,QAAQ,KAAKL,UAAWD,EAAQF,OAA5C,0BAUV,SAASS,EAAT,GAA0C,IAArBC,EAAoB,EAApBA,OAAQC,EAAY,EAAZA,UACvBC,EAAO,GACPC,EAAW,GAETC,EAASC,uBAAY,SAACC,GAC1BA,EAAcC,SAAQ,SAACC,GACrB,IAAMC,EAAS,IAAIC,WAEnBD,EAAOE,QAAU,kBAAMC,QAAQC,IAAI,6BACnCJ,EAAOK,QAAU,kBAAMF,QAAQC,IAAI,4BACnCJ,EAAOM,OAAS,WAEd,IAAMC,EAAiBR,EAAKS,KAAKC,MAAM,KAAKC,MACxCC,EAAcX,EAAOY,OAEF,QAAnBL,GAA+C,SAAnBA,GAC9Bf,EAAUqB,OAAOC,aAAaC,MAAM,KAAM,IAAIC,WAAWL,KACzDR,QAAQC,IAAIb,IAEc,SAAnBgB,GACPpC,EAAQ8C,eAAe,CAACN,YAAaA,IAClCO,MAAK,SAASN,GACXnB,EAAOmB,EAAOO,MACdzB,EAAWkB,EAAOlB,YAErB0B,MAAK,WACJ5B,EAAUC,GACVU,QAAQC,IAAIb,GACZY,QAAQC,IAAIV,OAIpBM,EAAOqB,kBAAkBtB,QAG1B,IAnCoC,EAoCDuB,YAAY,CAAC3B,WAA5C4B,EApCgC,EAoChCA,aAAcC,EApCkB,EAoClBA,cAErB,OACE,kBAAC,IAAMC,SAAP,KACE,6BACA,kBAACrC,EAAA,EAAD,CAAYsC,MAAM,UAAlB,sBACA,6BACA,yCAASH,IAAT,CAAyBG,MAAM,WAC7B,0BAAWF,KACX,kBAACG,EAAA,EAAD,CAAY3C,UAAU,YACpB,kBAAC,IAAD,SA8BK4C,MAvBf,WAAgB,IAAD,EACeC,mBAAS,IADxB,mBACNtC,EADM,KACEC,EADF,KAGb,OACE,kBAAC,IAAMiC,SAAP,KACE,kBAAC3C,EAAD,MACA,kBAACQ,EAAD,CAAYC,OAAQA,EAAQC,UAAWA,IACvC,6BACA,kBAACJ,EAAA,EAAD,CAAYsC,MAAM,UAAlB,yCAGA,6BACA,kBAACI,EAAA,EAAD,CAAMzC,QAAQ,YACZ,kBAAC0C,EAAA,EAAD,KACE,kBAAC3C,EAAA,EAAD,KACGG,OC9GOyC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMzB,MAAK,SAAA0B,GACjCA,EAAaC,kB","file":"static/js/main.531d0807.chunk.js","sourcesContent":["import React, {useCallback, useState} from 'react'\r\nimport {useDropzone} from 'react-dropzone'\r\nimport {AppBar, Toolbar, Typography, IconButton, Card, CardContent} from '@material-ui/core';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport GetAppIcon from '@material-ui/icons/GetApp';\r\nimport './App.css';\r\nimport firebase from 'firebase/app';\r\nimport 'firebase/database';\r\n\r\nconst firebaseConfig = {\r\n  apiKey: \"AIzaSyBRgb3Ed9B9bg_dXi_VtMpoT3Ezr_MK83A\",\r\n  authDomain: \"orrick-flashcards.firebaseapp.com\",\r\n  databaseURL: \"https://orrick-flashcards.firebaseio.com\",\r\n  projectId: \"orrick-flashcards\",\r\n  storageBucket: \"orrick-flashcards.appspot.com\",\r\n  messagingSenderId: \"744134644092\",\r\n  appId: \"1:744134644092:web:a557f652b0d0ca6d6594f9\"\r\n};\r\n\r\nfirebase.initializeApp(firebaseConfig);\r\n\r\nconst db = firebase.database().ref();\r\n\r\nvar mammoth = require(\"mammoth\");\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n  root: {\r\n    flexGrow: 1,\r\n  },\r\n  menuButton: {\r\n    marginRight: theme.spacing(2),\r\n  },\r\n  title: {\r\n    flexGrow: 1,\r\n  },\r\n}));\r\n\r\nfunction ButtonAppBar() {\r\n  const classes = useStyles();\r\n\r\n  return (\r\n    <div className={classes.root}>\r\n      <AppBar position=\"static\">\r\n        <Toolbar>\r\n          <Typography variant=\"h6\" className={classes.title}>\r\n            Flashcard Generator\r\n          </Typography>\r\n        </Toolbar>\r\n      </AppBar>\r\n    </div>\r\n  );\r\n}\r\n\r\n\r\nfunction MyDropzone({upload, setUpload}) {\r\n  var text = '';\r\n  var messages = '';\r\n\r\n  const onDrop = useCallback((acceptedFiles) => {\r\n    acceptedFiles.forEach((file) => {\r\n      const reader = new FileReader();\r\n\r\n      reader.onabort = () => console.log('file reading was aborted');\r\n      reader.onerror = () => console.log('file reading has failed');\r\n      reader.onload = () => {\r\n      // Do whatever you want with the file contents\r\n        const file_extention = file.name.split('.').pop();\r\n        var arrayBuffer = reader.result;\r\n\r\n        if (file_extention === 'txt' || file_extention === 'html') { // for txt or html files\r\n          setUpload(String.fromCharCode.apply(null, new Uint8Array(arrayBuffer)));\r\n          console.log(upload);\r\n        }\r\n        else if (file_extention === 'docx') { // for docx files\r\n          mammoth.extractRawText({arrayBuffer: arrayBuffer})\r\n            .then(function(result) {\r\n                text = result.value; // The generated text\r\n                messages = result.messages; // Any messages, such as warnings during conversion\r\n            })\r\n            .done(function() {\r\n              setUpload(text);\r\n              console.log(upload)\r\n              console.log(messages)\r\n            });\r\n        }\r\n      }\r\n      reader.readAsArrayBuffer(file);\r\n    })\r\n    \r\n  }, [])\r\n  const {getRootProps, getInputProps} = useDropzone({onDrop})\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <br/>\r\n      <Typography align='center'>Click or Drag File</Typography>\r\n      <br/>\r\n      <div {...getRootProps()} align='center'>\r\n        <input {...getInputProps()} />\r\n        <IconButton className='download'>\r\n          <GetAppIcon/>\r\n        </IconButton>\r\n      </div>\r\n    </React.Fragment>\r\n  ) \r\n}\r\n\r\nfunction App() {\r\n  const [upload, setUpload] = useState('')\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <ButtonAppBar/>\r\n      <MyDropzone upload={upload} setUpload={setUpload}/>\r\n      <br/>\r\n      <Typography align=\"center\">\r\n        Uploaded text will shown below â†“\r\n      </Typography>\r\n      <br/>\r\n      <Card variant=\"outlined\">\r\n        <CardContent>\r\n          <Typography>\r\n            {upload}\r\n          </Typography>\r\n        </CardContent>\r\n      </Card>\r\n    </React.Fragment>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}